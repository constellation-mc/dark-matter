plugins {
    id 'java-library'
    id 'fabric-loom' version "${loom_version}" apply false
    id 'maven-publish'
    id 'io.freefair.lombok' version '8.3' apply false
}

def targetJavaVersion = 17

allprojects {
    group = project.maven_group
    version = project.mod_version

    repositories {
        maven {
            url 'https://jitpack.io'
        }
    }

    apply plugin: 'java-library'
    apply plugin: 'fabric-loom'
    apply plugin: 'maven-publish'
    apply plugin: 'io.freefair.lombok'

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = "UTF-8"
        it.options.release = targetJavaVersion
    }

    java {
        withSourcesJar()
    }

    processResources {
        var input = [
                "version"          : project.version,
                "loader_version"   : project.loader_version,
                "minecraft_version": project.minecraft_version
        ]
        inputs.properties input
        filteringCharset "UTF-8"

        filesMatching("fabric.mod.json") {
            expand input
        }
    }

    jar {
        from("LICENSE") {
            rename { "${it}_${project.archivesBaseName}" }
        }
    }

    remapSourcesJar {
        doLast {
            copy {
                from "$project.layout.buildDirectory/libs"
                into "$rootProject.layout.buildDirectory/all_output"
                include "*sources.jar"
            }
        }
    }

    remapJar {
        doLast {
            copy {
                from "$project.layout.buildDirectory/libs"
                into "$rootProject.layout.buildDirectory/all_output"
                include "*.jar"
            }
        }
    }

    clean {
        doLast {
            delete "$rootProject.layout.buildDirectory/all_output"
        }
    }

    dependencies {
        minecraft("com.mojang:minecraft:${project.minecraft_version}")
        mappings("net.fabricmc:yarn:${project.yarn_mappings}:v2")
        modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")
    }

    allprojects.forEach { p ->
        loom.mods.register(p.name) {
            sourceSet p.sourceSets.main
        }
    }

    sourceSets {
        main {
            compileClasspath += main.compileClasspath
            runtimeClasspath += main.runtimeClasspath
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from(components["java"])
            }
        }

        repositories {
        }
    }
}

subprojects {
    dependencies {
        implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${project.mixin_extras_version}"))
        api(project(path: ':dark-matter-base', configuration: 'namedElements'))
    }
}

def fabric(Project project, List<String> modules) {
    for (final def module in modules) {
        project.dependencies.modApi(fabricApi.module(module, project.fabric_api_version))
    }
}

dependencies {
    fabric(project, [
            "fabric-api-base",
            "fabric-resource-loader-v0",
            "fabric-object-builder-api-v1"
    ])
}

subprojects.each {
    remapJar.dependsOn("${it.path}:remapJar")
}
remapJar {
    afterEvaluate {
        subprojects.forEach {

            nestedJars.from(project("${it.path}").tasks.named("remapJar"))
        }
    }
}

tasks.register('printVersionName') {
    doLast {
        println version.split("-")[0] + " (${version.split("-")[1]})"
    }
}

tasks.register('printVersion') {
    doLast {
        println version
    }
}

