import com.github.spotbugs.snom.SpotBugsTask
import net.fabricmc.loom.api.RemapConfigurationSettings

plugins {
    id 'java-library'
    id 'fabric-loom' version "${loom_version}" apply false
    id 'maven-publish'
    id 'io.freefair.lombok' version '8.6' apply false
    id 'com.github.spotbugs-base' version '6.0.12'
    id 'com.diffplug.spotless' version '6.25.0' apply false
    id "me.modmuss50.mod-publish-plugin" version "0.5.1"
}

def targetJavaVersion = 21
def local = !System.getenv().containsKey("GITHUB_RUN_NUMBER");

allprojects {
    group = project.maven_group
    version = "${project.mod_version}-${project.minecraft_version}-${local ? 'local' : "build.${System.getenv("GITHUB_RUN_NUMBER")}"}"

    apply from: "https://raw.githubusercontent.com/constellation-mc/artifacts/main/artifacts.groovy"
    constellationRepo(project, "handy-tests")

    repositories {
        maven {
            url 'https://jitpack.io'
        }
    }

    apply plugin: 'java-library'
    apply plugin: 'fabric-loom'
    apply plugin: 'maven-publish'
    apply plugin: 'io.freefair.lombok'
    apply plugin: 'com.diffplug.spotless'

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = "UTF-8"
        it.options.release = targetJavaVersion
    }

    java {
        withSourcesJar()
    }

    sourceSets {
        testmod {
            compileClasspath += main.compileClasspath
            runtimeClasspath += main.runtimeClasspath
        }
    }

    loom {
        addRemapConfiguration("testmodRemapImplementation", (RemapConfigurationSettings configuration) -> {
            configuration.getTargetConfigurationName().convention("testmodImplementation")
            configuration.getSourceSet().convention(sourceSets.testmod)
            configuration.getOnCompileClasspath().convention(true)
            configuration.getOnRuntimeClasspath().convention(true)
            configuration.getPublishingMode().convention(RemapConfigurationSettings.PublishingMode.NONE)
        })
    }

    loom {
        runs {
            testmod {
                server()
                ideConfigGenerated project.rootProject == project
                name = "Testmod"
                source sourceSets.testmod
            }
            testmodClient {
                client()
                ideConfigGenerated project.rootProject == project
                name = "Testmod Client"
                source sourceSets.testmod
            }
        }
    }

    allprojects.forEach { p ->
        loom.mods.register(p.name) {
            sourceSet p.sourceSets.main
        }

        loom.mods.register(p.name + "-testmod") {
            sourceSet p.sourceSets.testmod
        }
    }

    processResources {
        var input = [
                "version"          : project.version,
                "loader_version"   : project.loader_version,
                "minecraft_version": project.minecraft_version
        ]
        inputs.properties input
        filteringCharset "UTF-8"

        filesMatching("fabric.mod.json") {
            expand input
        }
    }

    spotless {
        java {
            removeUnusedImports()
            trimTrailingWhitespace()
            formatAnnotations()
        }
    }

    jar {
        from("LICENSE") {
            rename { "${it}_${project.archivesBaseName}" }
        }
    }

    sourcesJar {
        exclude {
            sourceSets.main.allSource.contains it.file
        }
        from delombok
    }

    clean {
        doLast {
            delete "$rootProject.layout.buildDirectory/all_output"
        }
    }

    dependencies {
        minecraft("com.mojang:minecraft:${project.minecraft_version}")
        mappings("net.fabricmc:yarn:${project.yarn_mappings}:v2")
        modApi("net.fabricmc:fabric-loader:${project.loader_version}")

        testmodImplementation sourceSets.main.output
        testmodRemapImplementation("me.melontini:handy-tests:0.1.0-1.20.5-build.7") {
            exclude(group: "net.fabricmc", module: "fabric-loader")
        }

        testImplementation "net.fabricmc:fabric-loader-junit:${project.loader_version}"
        testImplementation sourceSets.testmod.output
    }

    test {
        useJUnitPlatform()
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from(components["java"])
            }
        }

        if (!local) {
            repositories {
                maven {
                    name = "GitHubPackages"
                    url = "https://maven.pkg.github.com/constellation-mc/dark-matter"
                    credentials {
                        username = System.getenv("GITHUB_ACTOR")
                        password = System.getenv("GITHUB_TOKEN")
                    }
                }
            }
        }
    }
}

subprojects {
    dependencies {
        if (project.name != "dark-matter-base") {
            api(project(path: ':dark-matter-base', configuration: 'namedElements'))
        }

        testmodImplementation sourceSets.main.output
    }
}

static def fabric(Project project, List<String> modules) {
    for (final def module in modules) {
        project.dependencies.modApi(project.fabricApi.module(module, project.fabric_api_version))
    }
}

static def fabricTest(Project project, List<String> modules) {
    for (final def module in modules) {
        project.dependencies.testmodRemapImplementation(project.fabricApi.module(module, project.fabric_api_version))
    }
}

static def darkMatter(Project project, List<String> modules) {
    for (final def module in modules) {
        project.dependencies.api(project.dependencies.project(path: ":dark-matter-${module}", configuration: 'namedElements'))
    }
}

allprojects {
    dependencies {
        fabricTest(project, ["fabric-gametest-api-v1", "fabric-resource-loader-v0", "fabric-registry-sync-v0"])
    }
}

dependencies {//gradle doesn't believe in transitive test dependencies.
    fabricTest(project, ["fabric-item-group-api-v1"])
}

tasks.register("spotbugs", SpotBugsTask) { task ->
    subprojects.forEach {
        it.sourceSets.each {
            task.sourceDirs.from(task.sourceDirs.files, it.allSource.sourceDirectories)
            task.classDirs.from(task.classDirs.files, it.output)
            task.auxClassPaths.from(task.auxClassPaths.files, it.compileClasspath)
        }
    }
    excludeFilter = file("spotbugs.xml")
    ignoreFailures = true
    reports {
        if (local) {
            html {
                required = true
                outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
                stylesheet = 'fancy-hist.xsl'
            }
        } else {
            sarif {
                required = true
                outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.sarif")
            }
        }
    }
}

loom {
    runs {
        gametest {
            inherit testmod

            name "Game Test"

            // Enable the gametest runner
            vmArg "-Dfabric-api.gametest"
            runDir "build/gametest"
        }

        autotest {
            inherit(testmodClient)
        }
    }
}
test.dependsOn runGametest

subprojects.each {
    remapJar.dependsOn("${it.path}:remapJar")
}

dependencies {
    afterEvaluate {
        subprojects.each {
            api(project(path: "${it.path}", configuration: "namedElements"))
            testmodImplementation project("${it.path}:").sourceSets.testmod.output
        }
    }
}

remapJar {
    afterEvaluate {
        subprojects.forEach {
            nestedJars.from(project("${it.path}").tasks.named("remapJar"))
        }
    }
}

import me.modmuss50.mpp.ReleaseType

publishMods {
    file = remapJar.archiveFile
    additionalFiles.from(remapSourcesJar.archiveFile)

    changelog = "https://github.com/constellation-mc/dark-matter/blob/${{ providers.environmentVariable("GITHUB_SHA").getOrElse("1.20-fabric") }}/CHANGELOG.md"
    type = ReleaseType.valueOf(providers.environmentVariable("VERSION_TYPE").getOrElse("BETA"))
    modLoaders.add("fabric")

    displayName = "${project.mod_version} (${project.minecraft_version})"

    curseforge {
        projectId = "839908"
        accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
        minecraftVersions.add("${project.minecraft_version}")
    }
    modrinth {
        projectId = "qcz8IJ9L"
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        minecraftVersions.add("${project.minecraft_version}")
    }
    github {
        repository = "constellation-mc/dark-matter"
        accessToken = providers.environmentVariable("GITHUB_TOKEN")
        commitish = providers.environmentVariable("GITHUB_SHA").getOrElse("${project.minecraft_version}")
    }

    dryRun = local
}

